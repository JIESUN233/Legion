/*

Copyright (c) 2019, NVIDIA Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

#ifndef _SIMT_BARRIER
#define _SIMT_BARRIER

#include "atomic"

#include "../details/__config"

#ifdef _LIBCUPP_HAS_TREE_BARRIER
#  include <memory>
#endif

#include "../../libcxx/include/barrier"

namespace simt {

template<thread_scope _Sco, class _CompletionF = std::__empty_completion>
class barrier {

    std::__barrier_base<_CompletionF, _Sco> __b;
public:
    using arrival_token = typename std::__barrier_base<_CompletionF>::arrival_token;

    _LIBCPP_INLINE_VISIBILITY
    barrier(ptrdiff_t __count, _CompletionF __completion = _CompletionF()) 
        : __b(__count, std::move(__completion)) { 
    }

    barrier(barrier const&) = delete;
    barrier& operator=(barrier const&) = delete;

    [[nodiscard]] _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update = 1) 
    {
        return __b.arrive(update);
    }
    _LIBCPP_INLINE_VISIBILITY 
    void wait(arrival_token&& __phase) const
    {
        __b.wait(std::move(__phase));
    }
	_LIBCPP_INLINE_VISIBILITY
    void arrive_and_wait() 
    {
        wait(arrive());
	}
    _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop()
    {
        __b.arrive_and_drop();
    }
};

}

#endif //_SIMT_BARRIER
