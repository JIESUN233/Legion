/*

Copyright (c) 2019, NVIDIA Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

#ifndef _SIMT_SEMAPHORE
#define _SIMT_SEMAPHORE

#include "atomic"

#include "../details/__config"

#include "../../libcxx/include/semaphore"

namespace simt {

template<thread_scope _Sco, ptrdiff_t __least_max_value = INT_MAX>
class counting_semaphore
{
    std::__semaphore_base<_Sco, __least_max_value> __semaphore;
public:
    static constexpr ptrdiff_t max() noexcept {
        return __least_max_value;
    }

    _LIBCPP_INLINE_VISIBILITY
    counting_semaphore(ptrdiff_t __count = 0) : __semaphore(__count) { }
    ~counting_semaphore() = default;

    counting_semaphore(const counting_semaphore&) = delete;
    counting_semaphore& operator=(const counting_semaphore&) = delete;

    _LIBCPP_INLINE_VISIBILITY
    void release(ptrdiff_t __update = 1)
    {
        __semaphore.release(__update);
    }
    _LIBCPP_INLINE_VISIBILITY
    void acquire() 
    {
        __semaphore.acquire();
    }
    template<class Rep, class Period>
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire_for(std::chrono::duration<Rep, Period> const& __rel_time)
    {
        return __semaphore.try_acquire_for(std::chrono::duration_cast<std::chrono::nanoseconds>(__rel_time));
    }
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire()
    {
        return try_acquire_for(std::chrono::nanoseconds::zero());
    }
    template <class Clock, class Duration>
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire_until(std::chrono::time_point<Clock, Duration> const& __abs_time) 
    {
        auto const current = Clock::now();
        if(current >= __abs_time)
            return try_acquire();
        else
            return try_acquire_for(__abs_time - current);
    }
};

template<thread_scope _Sco>
using binary_semaphore = counting_semaphore<_Sco, 1>;

}

#endif //_SIMT_SEMAPHORE
