// -*- C++ -*-
//===--------------------------- semaphore --------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_SEMAPHORE
#define _LIBCPP_SEMAPHORE

/*
    semaphore synopsis

namespace std {

template<ptrdiff_t least_max_value = implementation-defined>
class counting_semaphore 
{
public:
static constexpr ptrdiff_t max() noexcept;

constexpr explicit counting_semaphore(ptrdiff_t desired);
~counting_semaphore();

counting_semaphore(const counting_semaphore&) = delete;
counting_semaphore& operator=(const counting_semaphore&) = delete;

void release(ptrdiff_t update = 1);
void acquire();
bool try_acquire() noexcept;
template<class Rep, class Period>
    bool try_acquire_for(const chrono::duration<Rep, Period>& rel_time);
template<class Clock, class Duration>
    bool try_acquire_until(const chrono::time_point<Clock, Duration>& abs_time);

private:
ptrdiff_t counter; // exposition only
};

using binary_semaphore = counting_semaphore<1>;

}

*/

#ifndef __simt__
#include <__config>
#include <__threading_support>
#include <atomic>
#include <cassert>
#endif

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#ifdef _LIBCPP_HAS_NO_THREADS
# error <semaphore> is not supported on this single threaded system
#endif

#if _LIBCPP_STD_VER < 11
# error <semaphore> is requires C++11 or later
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

template<int _Sco>
class __atomic_semaphore_base 
{
    __atomic_base<ptrdiff_t, _Sco> __count;
#ifndef _LIBCPP_HAS_NO_THREAD_CONTENTION_STATE
    __libcpp_contention_t          __contention;
#endif
public:
    _LIBCPP_INLINE_VISIBILITY
    __atomic_semaphore_base(ptrdiff_t __count) : __count(__count) { }
    ~__atomic_semaphore_base() = default;
    __atomic_semaphore_base(__atomic_semaphore_base const&) = delete;
    __atomic_semaphore_base& operator=(__atomic_semaphore_base const&) = delete;

    _LIBCPP_INLINE_VISIBILITY
    void release(ptrdiff_t __update = 1) 
    {
        if(0 < __count.fetch_add(__update, memory_order_release))
            ;
#ifdef _LIBCPP_HAS_NO_THREAD_CONTENTION_STATE
        else if(__update > 1)
            __cxx_atomic_notify_all(&__count.__a_);
        else
            __cxx_atomic_notify_one(&__count.__a_);
#else
        else if(__update > 1)
            __cxx_atomic_notify_all(&__count.__a_, &__contention);
        else
            __cxx_atomic_notify_one(&__count.__a_, &__contention);
#endif
    }
    _LIBCPP_INLINE_VISIBILITY
    void acquire() 
    {
        ptrdiff_t __old = __count.load(memory_order_relaxed);
        while (1) {
            if(__old == 0) {
#ifdef _LIBCPP_HAS_NO_THREAD_CONTENTION_STATE
                __cxx_atomic_wait(&__count.__a_, __old, memory_order_relaxed);
#else
                __cxx_atomic_wait(&__count.__a_, __old, memory_order_relaxed, &__contention);
#endif
                __old = __count.load(memory_order_relaxed);
                continue;
            }
            if(__count.compare_exchange_weak(__old, __old - 1, 
                    memory_order_acquire, memory_order_relaxed))
                break;
        }
    }
    template <class Rep, class Period>
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire_for(chrono::duration<Rep, Period> const& __rel_time) 
    {
        return __libcpp_thread_poll_with_backoff([=]() {
            ptrdiff_t __old = __count.load(memory_order_acquire);
            if (__old == 0)
                return false;
            return __count.compare_exchange_weak(__old, __old - 1, 
                        memory_order_acquire, memory_order_relaxed);
        }, __rel_time);
    }
};

#ifndef _LIBCPP_HAS_NO_SEMAPHORES

class __sem_semaphore_basic_base {

#ifdef __APPLE__
    atomic<ptrdiff_t>    __balance = {0};
#endif
    __libcpp_semaphore_t __semaphore;

public:
    
    _LIBCPP_EXPORTED_FROM_ABI
    __sem_semaphore_basic_base(ptrdiff_t __count);
    _LIBCPP_EXPORTED_FROM_ABI
    ~__sem_semaphore_basic_base();
    _LIBCPP_EXPORTED_FROM_ABI
    void release(ptrdiff_t __update);
    _LIBCPP_EXPORTED_FROM_ABI
    void acquire();
    _LIBCPP_EXPORTED_FROM_ABI
    bool try_acquire_for(chrono::nanoseconds __rel_time);
};

#ifndef _LIBCPP_HAS_NO_SEMAPHORE_BACK_BUFFER

class __sem_semaphore_back_buffered_base {
    
    _LIBCPP_INLINE_VISIBILITY
    void __backfill();

    __sem_semaphore_basic_base __semaphore;
    atomic<ptrdiff_t>          __backbuffer;

public:
    _LIBCPP_EXPORTED_FROM_ABI
    __sem_semaphore_back_buffered_base(ptrdiff_t __count);
    _LIBCPP_EXPORTED_FROM_ABI
    ~__sem_semaphore_back_buffered_base();
    _LIBCPP_EXPORTED_FROM_ABI
    void release(ptrdiff_t __update);
    _LIBCPP_EXPORTED_FROM_ABI
    void acquire();
    _LIBCPP_EXPORTED_FROM_ABI
    bool try_acquire_for(chrono::nanoseconds __rel_time);
};

#endif //_LIBCPP_HAS_NO_SEMAPHORE_BACK_BUFFER

#ifndef _LIBCPP_HAS_NO_SEMAPHORE_FRONT_BUFFER

class __sem_semaphore_front_buffered_base {

    _LIBCPP_INLINE_VISIBILITY
    bool __try_acquire_fast();
    _LIBCPP_INLINE_VISIBILITY
    void __try_done();

#ifndef _LIBCPP_HAS_NO_SEMAPHORE_BACK_BUFFER
    __sem_semaphore_back_buffered_base __semaphore;
#else    
    __sem_semaphore_basic_base         __semaphore;
#endif
    atomic<ptrdiff_t>                  __frontbuffer;

public:
    _LIBCPP_EXPORTED_FROM_ABI
    __sem_semaphore_front_buffered_base(ptrdiff_t __count);
    _LIBCPP_EXPORTED_FROM_ABI
    ~__sem_semaphore_front_buffered_base();
    _LIBCPP_EXPORTED_FROM_ABI
    void release(ptrdiff_t __update);
    _LIBCPP_EXPORTED_FROM_ABI
    void acquire();
    _LIBCPP_EXPORTED_FROM_ABI
    bool try_acquire_for(chrono::nanoseconds __rel_time);
};

#endif //_LIBCPP_HAS_NO_SEMAPHORE_FRONT_BUFFER

#endif //_LIBCPP_HAS_NO_SEMAPHORES

#if defined(_LIBCPP_HAS_NO_SEMAPHORES)
    template<int _Sco, ptrdiff_t>
    using __semaphore_base = __atomic_semaphore_base<_Sco>;
#else
# if !defined(_LIBCPP_HAS_NO_SEMAPHORE_FRONT_BUFFER)
    using __sem_semaphore_base = __sem_semaphore_front_buffered_base;
# elif !defined(_LIBCPP_HAS_NO_SEMAPHORE_BACK_BUFFER)
    using __sem_semaphore_base = __sem_semaphore_back_buffered_base;
# else
    using __sem_semaphore_base = __sem_semaphore_basic_base;
# endif
    template<int _Sco, ptrdiff_t __least_max_value>
    using __semaphore_base = 
        typename conditional<(__least_max_value > 1 && __least_max_value <= _LIBCPP_SEMAPHORE_MAX), 
                            __sem_semaphore_base, 
                            __atomic_semaphore_base<_Sco>>::type;
#endif

template<ptrdiff_t __least_max_value = _LIBCPP_SEMAPHORE_MAX>
class counting_semaphore
{
    __semaphore_base<0, __least_max_value> __semaphore;
public:
    static constexpr ptrdiff_t max() noexcept {
        return __least_max_value;
    }

    _LIBCPP_INLINE_VISIBILITY
    counting_semaphore(ptrdiff_t __count = 0) : __semaphore(__count) { }
    ~counting_semaphore() = default;

    counting_semaphore(const counting_semaphore&) = delete;
    counting_semaphore& operator=(const counting_semaphore&) = delete;

    _LIBCPP_INLINE_VISIBILITY
    void release(ptrdiff_t __update = 1)
    {
        __semaphore.release(__update);
    }
    _LIBCPP_INLINE_VISIBILITY
    void acquire() 
    {
        __semaphore.acquire();
    }
    template<class Rep, class Period>
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire_for(chrono::duration<Rep, Period> const& __rel_time)
    {
        return __semaphore.try_acquire_for(chrono::duration_cast<chrono::nanoseconds>(__rel_time));
    }
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire()
    {
        return try_acquire_for(chrono::nanoseconds::zero());
    }
    template <class Clock, class Duration>
    _LIBCPP_INLINE_VISIBILITY
    bool try_acquire_until(chrono::time_point<Clock, Duration> const& __abs_time) 
    {
        auto const current = Clock::now();
        if(current >= __abs_time)
            return try_acquire();
        else
            return try_acquire_for(__abs_time - current);
    }
};

using binary_semaphore = counting_semaphore<1>;

_LIBCPP_END_NAMESPACE_STD

#endif //_LIBCPP_SEMAPHORE
