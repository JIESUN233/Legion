// -*- C++ -*-
//===--------------------------- barrier ----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_BARRIER
#define _LIBCPP_BARRIER

/*
    barrier synopsis

namespace std 
{

  template<class CompletionFunction = see below>
  class barrier 
  {
  public:
    using arrival_token = see below;

    constexpr explicit barrier(ptrdiff_t phase_count,
                               CompletionFunction f = CompletionFunction());
    ~barrier();

    barrier(const barrier&) = delete;
    barrier& operator=(const barrier&) = delete;

    [[nodiscard]] arrival_token arrive(ptrdiff_t update = 1);
    void wait(arrival_token&& arrival) const;

    void arrive_and_wait();
    void arrive_and_drop();

  private:
    CompletionFunction completion; // exposition only
  };

}

*/

#ifndef __simt__
#include <__config>
#include <__threading_support>
#include <atomic>
# ifndef _LIBCPP_HAS_NO_TREE_BARRIER
#  include <memory>
# endif
#endif

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#ifdef _LIBCPP_HAS_NO_THREADS
# error <barrier> is not supported on this single threaded system
#endif

#if _LIBCPP_STD_VER < 11
# error <barrier> is requires C++11 or later
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

struct __empty_completion 
{
    inline _LIBCPP_INLINE_VISIBILITY
    void operator()() noexcept
    {
    }
};

#ifndef _LIBCPP_HAS_NO_TREE_BARRIER

template<class _CompletionF = __empty_completion, int _Sco = 0>
class __barrier_base {

    ptrdiff_t                       __expected;
    __atomic_base<ptrdiff_t, _Sco>  __expected_adjustment;
    _CompletionF                    __completion;

    using __phase_t = uint8_t;
    __atomic_base<__phase_t, _Sco>  __phase;

    struct __state_t 
    {
        struct {
            __atomic_base<__phase_t, _Sco> __phase = ATOMIC_VAR_INIT(0);
        } __tickets[64];
    };
    ::std::unique_ptr<__state_t[]>   __state;

    _LIBCPP_INLINE_VISIBILITY
    bool __arrive(__phase_t const __old_phase)
    {
        __phase_t const __half_step = __old_phase + 1, __full_step = __old_phase + 2;
#ifndef _LIBCPP_HAS_NO_THREAD_FAVORITE_BARRIER_INDEX
        ptrdiff_t __current = __libcpp_thread_favorite_barrier_index, 
#else
        ptrdiff_t __current = 0, 
#endif
                  __current_expected = __expected, 
                  __last_node = (__current_expected >> 1);
        for(size_t __round = 0;; ++__round) {
            if(__current_expected == 1)
                return true;
            for(;;++__current) {
#ifndef _LIBCPP_HAS_NO_THREAD_FAVORITE_BARRIER_INDEX
                if(0 == __round) {
                    if(__current >= __current_expected)
                        __current = 0;
                    __libcpp_thread_favorite_barrier_index = __current;
                }
#endif
                __phase_t expect = __old_phase;
                if(__current == __last_node && (__current_expected & 1))
                {
                    if(__state[__current].__tickets[__round].__phase.compare_exchange_strong(expect, __full_step, memory_order_acq_rel))
                        break;    // I'm 1 in 1, go to next __round
                }
                else if(__state[__current].__tickets[__round].__phase.compare_exchange_strong(expect, __half_step, memory_order_acq_rel)) 
                {
                    return false; // I'm 1 in 2, done with arrival
                }
                else if(expect == __half_step)
                {
                    if(__state[__current].__tickets[__round].__phase.compare_exchange_strong(expect, __full_step, memory_order_acq_rel))
                        break;    // I'm 2 in 2, go to next __round
                }
            }
            __current_expected = (__current_expected >> 1) + (__current_expected & 1);
            __current &= ~( 1 << __round );
            __last_node &= ~( 1 << __round );
        }
    }

public:
    using arrival_token = __phase_t;
    
    _LIBCPP_INLINE_VISIBILITY
    __barrier_base(ptrdiff_t __expected, _CompletionF __completion = _CompletionF()) 
            : __expected(__expected), __expected_adjustment(0), __completion(std::move(__completion)), 
              __phase(0), __state(new __state_t[(__expected+1) >> 1])
    { 
    }
    [[nodiscard]] _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update) 
    {
        auto __old_phase = __phase.load(memory_order_relaxed);
        for(; update; --update)
            if(__arrive(__old_phase)) {
                __completion();
                __expected += __expected_adjustment.load(memory_order_relaxed);
                __expected_adjustment.store(0, memory_order_relaxed);
                __phase.store(__old_phase + 2, memory_order_release);
            }
        return __old_phase;
    }
    _LIBCPP_INLINE_VISIBILITY
    void wait(arrival_token&& __old_phase) const 
    {
        __libcpp_thread_poll_with_backoff([=]() -> bool {
            return __phase.load(memory_order_acquire) != __old_phase;
        });
    }
    _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop() 
    {
        __expected_adjustment.fetch_sub(1, memory_order_relaxed);
        (void)arrive(1);
    }
};

#else

template<class _CompletionF, int _Sco = 0>
class __barrier_base {

    __atomic_base<ptrdiff_t, _Sco> __expected;
    __atomic_base<ptrdiff_t, _Sco> __arrived;
    _CompletionF                   __completion;
    __atomic_base<bool, _Sco>      __phase;
public:
    using arrival_token = bool;

    _LIBCPP_INLINE_VISIBILITY
    __barrier_base(ptrdiff_t __expected, _CompletionF __completion = _CompletionF()) 
        : __expected(__expected), __arrived(__expected), __completion(__completion), __phase(false)
    {
    }
    [[nodiscard]] _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update) 
    {
        auto const __old_phase = __phase.load(memory_order_relaxed);
        auto const __result = __arrived.fetch_sub(update, memory_order_acq_rel) - update;
        auto const new_expected = __expected.load(memory_order_relaxed);
        if(0 == __result) {
            __completion();
            __arrived.store(new_expected, memory_order_relaxed);
            __phase.store(!__old_phase, memory_order_release);
            atomic_notify_all(&__phase);
        }
        return __old_phase;
    }
    _LIBCPP_INLINE_VISIBILITY
    void wait(arrival_token&& __old_phase) const 
    {
        __phase.wait(__old_phase, memory_order_acquire);
    }
    _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop() 
    {
        __expected.fetch_sub(1, memory_order_relaxed);
        (void)arrive(1);
    }
};

template<int _Sco>
class __barrier_base<__empty_completion, _Sco> {

    static constexpr uint64_t __expected_unit = 1ull;
    static constexpr uint64_t __arrived_unit = 1ull << 32;
    static constexpr uint64_t __expected_mask = __arrived_unit - 1;
    static constexpr uint64_t __phase_bit = 1ull << 63;
    static constexpr uint64_t __arrived_mask = (__phase_bit - 1) & ~__expected_mask;

    __atomic_base<uint64_t, _Sco> __phase_arrived_expected;

    static _LIBCPP_INLINE_VISIBILITY
    constexpr uint64_t __init(ptrdiff_t __count) _NOEXCEPT 
    {
        return ((uint64_t(1u << 31) - __count) << 32) 
              | (uint64_t(1u << 31) - __count);
    }

public:
    using arrival_token = uint64_t;

    _LIBCPP_INLINE_VISIBILITY
    explicit inline __barrier_base(ptrdiff_t __count, __empty_completion = __empty_completion()) 
        : __phase_arrived_expected(__init(__count)) 
    { 
    }
    [[nodiscard]] inline _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update) 
    {
        auto const __inc = __arrived_unit * update;
        auto const __old = __phase_arrived_expected.fetch_add(__inc, memory_order_acq_rel);
        if((__old ^ (__old + __inc)) & __phase_bit) {
            __phase_arrived_expected.fetch_add((__old & __expected_mask) << 32, memory_order_relaxed);
            __phase_arrived_expected.notify_all();
        }
        return __old & __phase_bit;
    }
    inline _LIBCPP_INLINE_VISIBILITY 
    void wait(arrival_token&& __phase) const
    {
#if defined(__CUDACC__)
        __libcpp_thread_poll_with_backoff([=] _LIBCPP_INLINE_VISIBILITY () -> bool
#else
        __libcpp_thread_poll_with_backoff([=]() -> bool
#endif
        {
            uint64_t const __current = __phase_arrived_expected.load(memory_order_acquire);
            return ((__current & __phase_bit) != __phase);
        });
    }
    inline _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop() 
    {
        __phase_arrived_expected.fetch_add(__expected_unit, memory_order_relaxed);
        (void)arrive(1);
    }
};

#endif //_LIBCPP_HAS_NO_TREE_BARRIER

template<class _CompletionF = __empty_completion>
class barrier {

    __barrier_base<_CompletionF> __b;
public:
    using arrival_token = typename __barrier_base<_CompletionF>::arrival_token;

    _LIBCPP_INLINE_VISIBILITY
    barrier(ptrdiff_t __count, _CompletionF __completion = _CompletionF()) 
        : __b(__count, std::move(__completion)) { 
    }

    barrier(barrier const&) = delete;
    barrier& operator=(barrier const&) = delete;

    [[nodiscard]] _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update = 1) 
    {
        return __b.arrive(update);
    }
    _LIBCPP_INLINE_VISIBILITY 
    void wait(arrival_token&& __phase) const
    {
        __b.wait(std::move(__phase));
    }
	_LIBCPP_INLINE_VISIBILITY
    void arrive_and_wait() 
    {
        wait(arrive());
	}
    _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop()
    {
        __b.arrive_and_drop();
    }
};

_LIBCPP_END_NAMESPACE_STD

#endif //_LIBCPP_BARRIER
